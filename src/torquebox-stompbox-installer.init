#!/bin/sh
#
# torquebox-stompbox-installer	Installs StompBox from Git at first boot
#
# chkconfig: 2345 80 35
# description: TorqueBox StompBox Boot-time Installer
# processname: thin

### BEGIN INIT INFO
# Provides: torquebox-stompbox-installer
# Required-Start: $network $syslog
# Required-Stop: $network
# Default-Start:
# Default-Stop:
# Short-Description: TorqueBox StompBox Installer
# Description: TorqueBox StompBox Installer
### END INIT INFO

STOMPBOX_INSTALL_DIR=/opt/stompbox
STOMPBOX_GIT_URL=https://github.com/torquebox/stompbox.git
JRUBY_HOME=/opt/jruby

# Source function library.
. /etc/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ ${NETWORKING} = "no" ] && exit 0

NAME="$(basename $0)"
unset ISBOOT
if [ "${NAME:0:1}" = "S" -o "${NAME:0:1}" = "K" ]; then
    NAME="${NAME:3}"
    ISBOOT="1"
fi

function success_or_failure() {
    if [ $RETVAL -eq 0 ]; then
        echo_success
    else
        echo_failure
    fi

    echo
}

function install_stompbox_app() {
    echo " - Install ${STOMPBOX_GIT_URL}"
    RETVAL=0
    git clone ${STOMPBOX_GIT_URL} ${STOMPBOX_INSTALL_DIR}
    RETVAL=$?
    success_or_failure
}

function remove_stompbox() {
  echo -n " - Remove ${STOMPBOX_INSTALL_DIR}"
  RETVAL=0
  rm -Rf ${STOMPBOX_INSTALL_DIR}
  RETVAL=$?
  success_or_failure
}

function install_stompbox_bundle() {
    echo " - Installing Gem bundle"
    cd ${STOMPBOX_INSTALL_DIR} && ${JRUBY_HOME}/bin/jruby -S bundle install
    success_or_failure
}

function generate_stompbox_yml() {
    echo " - Seeding StompBox configuration"
    api_key=$(ifconfig | openssl sha1 | cut -f 2 -d ' ')
    echo "   API KEY: ${api_key}"

    yaml=${STOMPBOX_INSTALL_DIR}/config/stompbox.yml
    echo -n "   > ${yaml}"

    RETVAL=0
    echo '' > ${STOMPBOX_INSTALL_DIR}/config/stompbox.yml
    echo "database: postgres://stompbox:stompbox@localhost/stompbox" >> ${yaml}
    echo "deployments: /opt/stompbox-deployments"                    >> ${yaml}
    echo ""                                                          >> ${yaml}
    echo "username: admin"                                           >> ${yaml}
    echo "password: notpassword"                                     >> ${yaml}
    echo ""                                                          >> ${yaml}
    echo "api_key: ${api_key}"                                       >> ${yaml}
    RETVAL=$?
    success_or_failure
}

function setup_database_user() {
  psql -U postgres -c '\du stompbox' | grep stompbox > /dev/null
  if [ $? != 0 ] ; then 
    echo -n " - Create database user 'stompbox'"
    RETVAL=0
    psql -U postgres -q -c "create user stompbox password 'stompbox' createdb"
    RETVAL=$?
    success_or_failure
  else
    echo -n " - Database user 'stompbox' already exists"
    RETVAL=0
    success_or_failure
  fi
}

function remove_database_user() {
  psql -U postgres -c '\du stompbox' | grep stompbox > /dev/null
  if [ $? == 0 ] ; then 
    echo -n " - Remove database user 'stompbox'"
    RETVAL=0
    psql -U postgres -q -c "drop user stompbox" > /dev/null
    RETVAL=$?
    success_or_failure
  else
    echo -n " - No database user 'stompbox' to remove"
    RETVAL=0
    success_or_failure
  fi
}

function setup_database() {
  psql -U postgres -l | grep stompbox > /dev/null
  if [ $? != 0 ] ; then
    echo -n " - Create database 'stompbox'"
    RETVAL=0
    psql -U postgres -q -c "create database stompbox owner stompbox encoding 'utf8'"
    RETVAL=$?
    success_or_failure
  else
    echo -n " - Database 'stompbox' already exists"
    RETVAL=0
    success_or_failure
  fi
}

function remove_database() {
  psql -U postgres -l | grep stompbox > /dev/null
  if [ $? == 0 ] ; then
    echo -n " - Remove database 'stompbox'"
    RETVAL=0
    psql -U postgres -q -c "drop database stompbox" > /dev/null
    RETVAL=$?
    success_or_failure
  else
    echo -n " - No database 'stompbox' to remove"
    RETVAL=0
    success_or_failure
  fi
}

install() {
    echo -n "Starting ${NAME}: "
    RETVAL=0
    if [ ! -d /opt/stompbox ] ; then
      echo ""
      install_stompbox_app
      install_stompbox_bundle
      setup_database_user
      setup_database
      generate_stompbox_yml
    else
      success_or_failure
    fi
    return $RETVAL
}

uninstall() {
    echo "Cleaning ${NAME}: "
    remove_database
    remove_database_user
    remove_stompbox
}

stop() {
    echo -n "Stopping ${NAME}: "
    RETVAL=0
    success_or_failure
    return $RETVAL 
}

status() {
  if [ -d ${STOMPBOX_INSTALL_DIR} ] ; then
    echo "${NAME} is installed"
  else
    echo "${NAME} is not installed"
  fi
}

case "$1" in
start)
    install
    ;;
stop)
    stop
    ;;
restart|reload)
    stop
    ;;
status)
    status
    ;;
install)
    install
    ;;
force-install)
    uninstall
    install
    ;;
uninstall)
    uninstall
    ;;
help)
    echo "usage: ${NAME} (start|status|instal|force-install|uninstall|help)"
    ;;
*)
    echo "usage: ${NAME} (start|status|instal|force-install|uninstall|help)"
    exit 1
esac

exit $RETVAL

